{"version":3,"file":"static/js/418.c3d2e002.chunk.js","mappings":"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","sources":["shared/components/FormElements/ImageUpload.js","shared/components/UIElements/Card.js","user/pages/Auth.js"],"sourcesContent":["import { useEffect, useRef, useState } from \"react\";\r\nimport Button from \"./Button\";\r\nimport \"./ImageUpload.css\";\r\n\r\nfunction ImageUpload(props) {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\n  const pickHandler = (e) => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n\r\n    if (e.target.files && e.target.files.length === 1) {\r\n      pickedFile = e.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    props.onInput(props.id, pickedFile, fileIsValid);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        ref={filePickerRef}\r\n        type=\"file\"\r\n        id={props.id}\r\n        style={{ display: \"none\" }}\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && \"center\"}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl ? (\r\n            <img src={previewUrl} alt=\"Preview\" />\r\n          ) : (\r\n            <p>Please pick an image.</p>\r\n          )}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ImageUpload;\r\n","import React from 'react';\n\nimport './Card.css';\n\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useState, useContext } from \"react\";\n\nimport Card from \"../../shared/components/UIElements/Card\";\nimport Input from \"../../shared/components/FormElements/Input\";\nimport Button from \"../../shared/components/FormElements/Button\";\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from \"../../shared/util/validators\";\nimport { useForm } from \"../../shared/hooks/form-hook\";\nimport { AuthContext } from \"../../shared/context/auth-context\";\nimport \"./Auth.css\";\nimport LoadingSpinner from \"../../shared/components/UIElements/LoadingSpinner\";\nimport ErrorModal from \"../../shared/components/UIElements/ErrorModal\";\nimport { useHttpClient } from \"../../shared/hooks/http-hook\";\nimport ImageUpload from \"../../shared/components/FormElements/ImageUpload\";\n\nconst Auth = () => {\n  const auth = useContext(AuthContext);\n  const [isLoginMode, setIsLoginMode] = useState(true);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n\n  const [formState, inputHandler, setFormData] = useForm(\n    {\n      email: {\n        value: \"\",\n        isValid: false,\n      },\n      password: {\n        value: \"\",\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  const switchModeHandler = () => {\n    if (!isLoginMode) {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: undefined,\n          image: undefined,\n        },\n        formState.inputs.email.isValid && formState.inputs.password.isValid\n      );\n    } else {\n      setFormData(\n        {\n          ...formState.inputs,\n          name: {\n            value: \"\",\n            isValid: false,\n          },\n          image: {\n            value: null,\n            isValid: false,\n          },\n        },\n        false\n      );\n    }\n    setIsLoginMode((prevMode) => !prevMode);\n  };\n\n  const authSubmitHandler = async (event) => {\n    event.preventDefault();\n\n    if (isLoginMode) {\n      try {\n        const res = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/login`,\n          \"POST\",\n\n          JSON.stringify({\n            email: formState.inputs.email.value,\n            password: formState.inputs.password.value,\n          }),\n          {\n            \"Content-type\": \"application/json\",\n          }\n        );\n\n        auth.login(res.userId, res.token);\n      } catch (err) {}\n    } else {\n      try {\n        const formData = new FormData();\n        formData.append(\"email\", formState.inputs.email.value);\n        formData.append(\"name\", formState.inputs.name.value);\n        formData.append(\"password\", formState.inputs.password.value);\n        formData.append(\"image\", formState.inputs.image.value);\n        const res = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/users/signup`,\n          \"POST\",\n          formData\n        );\n\n        auth.login(res.userId, res.token);\n      } catch (err) {}\n    }\n  };\n\n  return (\n    <>\n      <ErrorModal error={error} onClear={clearError} />\n      <Card className=\"authentication\">\n        {isLoading && <LoadingSpinner asOverlay />}\n        <h2>Login Required</h2>\n        <hr />\n        <form onSubmit={authSubmitHandler}>\n          {!isLoginMode && (\n            <Input\n              element=\"input\"\n              id=\"name\"\n              type=\"text\"\n              label=\"Your Name\"\n              validators={[VALIDATOR_REQUIRE()]}\n              errorText=\"Please enter a name.\"\n              onInput={inputHandler}\n            />\n          )}\n          {!isLoginMode && (\n            <ImageUpload\n              onInput={inputHandler}\n              id=\"image\"\n              center\n              errorText=\"Please provide an image\"\n            />\n          )}\n          <Input\n            element=\"input\"\n            id=\"email\"\n            type=\"email\"\n            label=\"E-Mail\"\n            validators={[VALIDATOR_EMAIL()]}\n            errorText=\"Please enter a valid email address.\"\n            onInput={inputHandler}\n          />\n          <Input\n            element=\"input\"\n            id=\"password\"\n            type=\"password\"\n            label=\"Password\"\n            validators={[VALIDATOR_MINLENGTH(6)]}\n            errorText=\"Please enter a valid password, at least 6 characters.\"\n            onInput={inputHandler}\n          />\n          <Button type=\"submit\" disabled={!formState.isValid}>\n            {isLoginMode ? \"LOGIN\" : \"SIGNUP\"}\n          </Button>\n        </form>\n        <Button inverse onClick={switchModeHandler}>\n          SWITCH TO {isLoginMode ? \"SIGNUP\" : \"LOGIN\"}\n        </Button>\n      </Card>\n    </>\n  );\n};\n\nexport default Auth;\n"],"names":["props","_useState","useState","_useState2","_slicedToArray","file","setFile","_useState3","_useState4","previewUrl","setPreviewUrl","_useState5","_useState6","isValid","setIsValid","filePickerRef","useRef","useEffect","fileReader","FileReader","onload","result","readAsDataURL","_jsxs","className","children","_jsx","ref","type","id","style","display","accept","onChange","e","pickedFile","fileIsValid","target","files","length","onInput","concat","center","src","alt","Button","onClick","current","click","errorText","auth","useContext","AuthContext","isLoginMode","setIsLoginMode","_useHttpClient","useHttpClient","isLoading","error","sendRequest","clearError","_useForm","useForm","email","value","password","_useForm2","formState","inputHandler","setFormData","authSubmitHandler","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","event","res","formData","_res","wrap","_context","prev","next","preventDefault","process","JSON","stringify","inputs","sent","login","userId","token","t0","FormData","append","name","image","t1","stop","_x","apply","arguments","_Fragment","ErrorModal","onClear","Card","LoadingSpinner","asOverlay","onSubmit","Input","element","label","validators","VALIDATOR_REQUIRE","ImageUpload","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","disabled","inverse","_objectSpread","undefined","prevMode"],"sourceRoot":""}